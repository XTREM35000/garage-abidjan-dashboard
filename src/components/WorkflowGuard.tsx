import React, { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useNavigate } from 'react-router-dom';
import SplashScreen from '@/components/SplashScreen';
import SuperAdminSetupModal from '@/components/SuperAdminSetupModal';
import { OrganisationOnboarding } from '@/components/OrganisationOnboarding';
import BrandSetupWizard from '@/components/BrandSetupWizard';
import { toast } from 'sonner';

interface WorkflowGuardProps {
  children: React.ReactNode;
}

type WorkflowStep = 
  | 'loading'
  | 'super-admin-setup' 
  | 'organisation-setup'
  | 'admin-setup'
  | 'redirect-auth'
  | 'complete';

const WorkflowGuard: React.FC<WorkflowGuardProps> = ({ children }) => {
  const [currentStep, setCurrentStep] = useState<WorkflowStep>('loading');
  const [isLoading, setIsLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    checkWorkflowConditions();
  }, []);

  const checkWorkflowConditions = async () => {
    try {
      setIsLoading(true);
      
      // 1. V√©rifier si Super-Admin existe
      console.log('üîç V√©rification Super-Admin...');
      const { count: superAdminCount, error: superAdminError } = await supabase
        .from('super_admins')
        .select('*', { count: 'exact', head: true });

      if (superAdminError) {
        console.error('‚ùå Erreur Super-Admin:', superAdminError);
        // Si erreur RLS ou autre, on affiche le modal de cr√©ation
        setCurrentStep('super-admin-setup');
        setIsLoading(false);
        return;
      }

      if (!superAdminCount || superAdminCount === 0) {
        console.log('‚ö†Ô∏è Aucun Super-Admin trouv√©, cr√©ation n√©cessaire');
        setCurrentStep('super-admin-setup');
        setIsLoading(false);
        return;
      }

      console.log(`‚úÖ ${superAdminCount} Super-Admin(s) trouv√©(s)`);

      // 2. V√©rifier si au moins une organisation existe
      console.log('üîç V√©rification Organisations...');
      const { count: orgCount, error: orgError } = await supabase
        .from('organisations')
        .select('*', { count: 'exact', head: true });

      if (orgError) {
        console.error('‚ùå Erreur Organisations:', orgError);
        if (orgError.code === '42P01') { // Table doesn't exist
          setCurrentStep('organisation-setup');
          setIsLoading(false);
          return;
        }
      }

      if (!orgCount || orgCount === 0) {
        console.log('‚ö†Ô∏è Aucune organisation trouv√©e, cr√©ation n√©cessaire');
        setCurrentStep('organisation-setup');
        setIsLoading(false);
        return;
      }

      console.log(`‚úÖ ${orgCount} organisation(s) trouv√©e(s)`);

      // 3. V√©rifier si au moins un utilisateur Admin existe dans users
      console.log('üîç V√©rification Utilisateurs Admin...');
      const { count: adminCount, error: userAdminError } = await supabase
        .from('users')
        .select('*', { count: 'exact', head: true })
        .eq('role', 'admin');

      if (userAdminError) {
        console.error('‚ùå Erreur Utilisateurs Admin:', userAdminError);
        // Si erreur 403 ou table inexistante, on passe √† l'√©tape suivante
      }

      if (!adminCount || adminCount === 0) {
        console.log('‚ö†Ô∏è Aucun admin trouv√© dans users, cr√©ation n√©cessaire');
        setCurrentStep('admin-setup');
        setIsLoading(false);
        return;
      }

      console.log(`‚úÖ ${adminCount} admin(s) trouv√©(s) dans users`);

      // 4. V√©rifier si au moins un utilisateur existe dans users
      console.log('üîç V√©rification Utilisateurs...');
      const { count: userCount, error: userError } = await supabase
        .from('users')
        .select('*', { count: 'exact', head: true });

      if (userError) {
        console.error('‚ùå Erreur Utilisateurs:', userError);
        // Si erreur, rediriger vers auth
        setCurrentStep('redirect-auth');
        setIsLoading(false);
        return;
      }

      if (!userCount || userCount === 0) {
        console.log('‚ö†Ô∏è Aucun utilisateur trouv√©, redirection vers auth');
        setCurrentStep('redirect-auth');
        setIsLoading(false);
        return;
      }

      console.log(`‚úÖ ${userCount} utilisateur(s) trouv√©(s)`);

      // Tous les checks sont OK, workflow complet
      console.log('üéâ Workflow complet, acc√®s autoris√©');
      setCurrentStep('complete');

    } catch (error) {
      console.error('‚ùå Erreur g√©n√©rale lors de la v√©rification:', error);
      toast.error('Erreur lors de la v√©rification du syst√®me');
      setCurrentStep('super-admin-setup'); // Fallback vers le d√©but
    } finally {
      setIsLoading(false);
    }
  };

  const handleSuperAdminCreated = (adminData: any) => {
    console.log('‚úÖ Super-Admin cr√©√©:', adminData);
    toast.success('Super-Admin cr√©√© avec succ√®s!');
    // Relancer la v√©rification du workflow
    checkWorkflowConditions();
  };

  const handleOrganisationCreated = (orgId: string) => {
    console.log('‚úÖ Organisation cr√©√©e:', orgId);
    toast.success('Organisation cr√©√©e avec succ√®s!');
    // Relancer la v√©rification du workflow
    checkWorkflowConditions();
  };

  const handleAdminSetupComplete = () => {
    console.log('‚úÖ Configuration admin termin√©e');
    toast.success('Configuration termin√©e!');
    // Relancer la v√©rification du workflow
    checkWorkflowConditions();
  };

  // Loading state
  if (isLoading) {
    return <SplashScreen onComplete={() => {}} />;
  }

  // Rendu selon l'√©tape
  switch (currentStep) {
    case 'super-admin-setup':
      return (
        <SuperAdminSetupModal
          isOpen={true}
          onComplete={handleSuperAdminCreated}
        />
      );

    case 'organisation-setup':
      return (
        <OrganisationOnboarding
          isOpen={true}
          onComplete={handleOrganisationCreated}
        />
      );

    case 'admin-setup':
      return (
        <BrandSetupWizard
          isOpen={true}
          onComplete={handleAdminSetupComplete}
        />
      );

    case 'redirect-auth':
      // Redirection imm√©diate vers /auth
      React.useEffect(() => {
        navigate('/auth');
      }, []);
      return <SplashScreen onComplete={() => {}} />;

    case 'complete':
    default:
      return <>{children}</>;
  }
};

export default WorkflowGuard;